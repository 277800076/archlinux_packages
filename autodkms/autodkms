build ()
{

COMMAND='
	while [[  -f /var/lib/pacman/db.lck ]]
	do
	    sleep 3
	done
		
	if [ ! -d "/usr/lib/modules/${KERNELVERSION}/build" ]; then
	    echo -e "\e[1m\e[33mYou need to install or update ${KERNELVERSION} headers before build kernel image.\e[0m"
	    exit 1
	fi
	touch /tmp/dkms.status
	if [ "`cat /tmp/dkms.status`" == "${KERNELVERSION}" ]; then
		echo "SKIP"
		rm /tmp/dkms.status
	else
	    echo "Building dkms modules for ${KERNELVERSION} kernel..."
	    echo "${KERNELVERSION}" > /tmp/dkms.status
	    if [ "$installtype" == "update" ]; then
	        dkms autoinstall -k ${KERNELVERSION} 1> /tmp/dkms.log 2>&1
	    else
	        dkms autoinstall -k ${KERNELVERSION} | tee /tmp/dkms.log
	    fi    
	    echo "Build complete."
	fi
'

#if [ "`ps -ef | grep -P "\d\d:\d\d:\d\d pacman"`" != "" ] ; then

if  [[  -f /var/lib/pacman/db.lck ]]  ; then
	
	#sh /usr/share/autodkms/hook.sh ${KERNELVERSION} update 1> /dev/null 2>&1 &
	
	installtype="update"
	eval "$COMMAND"  1> /dev/null 2>&1 &
	
	#export installtype="update"
	#sh -c "$COMMAND"  1> /dev/null 2>&1 &
	
else
	
	#sh /usr/share/autodkms/hook.sh ${KERNELVERSION} noupdate
	
	installtype="noupdate"
	#export installtype="noupdate"
	eval "$COMMAND"  
fi
}

help ()
{
cat<<HELPEOF
    This hook rebuilds all dkms modules for new kernel.
HELPEOF
} 
